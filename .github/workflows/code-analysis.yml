name: code analysis

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    name: build and analyze
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: checkout master branch
        uses: actions/checkout@v4
        with:
          ref: 'master'
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: create sonar properties file
        run: |
          printf "\
          sonar.projectKey=oscam-mirror_oscam\n\
          sonar.organization=oscam-mirror\n\
          \n\
          # This is the name and version displayed in the SonarCloud UI.\n\
          #sonar.projectName=oscam\n\
          #sonar.projectVersion=1.0\n\
          \n\
          \n\
          # Path is relative to the sonar-project.properties file. Replace '\\\' by '/' on Windows.\n\
          #sonar.sources=.\n\
          \n\
          # Encoding of the source code. Default is default system encoding\n\
          #sonar.sourceEncoding=UTF-8\n" \
          > sonar-project.properties
          cat sonar-project.properties

      - name: build and install libdvbcsa
        run: |
          git clone https://github.com/oe-mirrors/libdvbcsa.git
          cd libdvbcsa
          ./bootstrap
          ./configure --enable-avx2
          make
          sudo make install

      - name: install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: run build-wrapper
        run: |
          ./config.sh --enable all
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make

      - name: run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
